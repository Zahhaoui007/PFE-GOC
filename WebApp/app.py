import os
from flask import Flask, redirect, request, jsonify, render_template, session, url_for
import pandas as pd
import joblib
from requests import Session as requests_session  # Renommage de l'import
from sklearn.preprocessing import LabelEncoder
from supabase import create_client, Client
from io import BytesIO
from reportlab.pdfgen import canvas
from flask import send_file

# Configurations de Supabase
URL = 'https://zjflooqiypnrqvcbfisy.supabase.co'  # Remplacez avec votre URL de projet
KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpqZmxvb3FpeXBucnF2Y2JmaXN5Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTcxODAxOTgyNiwiZXhwIjoyMDMzNTk1ODI2fQ.gSV-IFIsajz9krhvb2Zq7pwhT57aQS60kepL_nWF7uQ'  # Remplacez avec votre clé anon
supabase: Client = create_client(URL, KEY)

model = joblib.load(r'C:\Users\WD\Documents\DERASSA\3eme annee\Frigoo\goc\WebAPP\Apple_storage_model.pkl')
label_encoder = joblib.load(r'C:\Users\WD\Documents\DERASSA\3eme annee\Frigoo\goc\WebAPP\label_encoder.pkl')

app = Flask(__name__)
app.secret_key = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpqZmxvb3FpeXBucnF2Y2JmaXN5Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTcxODAxOTgyNiwiZXhwIjoyMDMzNTk1ODI2fQ.gSV-IFIsajz9krhvb2Zq7pwhT57aQS60kepL_nWF7uQ' 

@app.route('/')
def home():
    return redirect(url_for('login'))

@app.route('/generate_pdf', methods=['GET'])
def generate_pdf():
    if 'prediction_results' not in session or 'user_id' not in session:
        return redirect(url_for('predict'))  # Redirige vers la page de prédiction si les résultats ou l'admin ne sont pas disponibles

    results = session['prediction_results']
    admin_name = session.get('admin_name', 'Unknown')  # Récupération du nom de l'administrateur
    logo_path = r'C:\Users\WD\Documents\DERASSA\3eme annee\Frigoo\goc\WebAPP\logo.jpg'  # Chemin absolu du logo

    buffer = BytesIO()
    c = canvas.Canvas(buffer)

    # Ajout du logo
    c.drawImage(logo_path, 100, 750, width=100, height=100)  # Position et taille du logo

    # Ajout de contenu au PDF
    c.drawString(100, 650, f"Generated by: {admin_name}")
    c.drawString(100, 620, "Prediction Results")
    c.drawString(100, 590, f"Optimal Temperature (°C): {results['optimal_temperature']}")
    c.drawString(100, 560, f"Optimal Humidity (%): {results['optimal_humidity']}")
    c.drawString(100, 530, f"Optimal CO2 Percentage (%): {results['optimal_co2_percent']}")
    c.drawString(100, 500, f"Optimal O2 Percentage (%): {results['optimal_o2_percent']}")

    c.save()
    buffer.seek(0)

    return send_file(buffer, as_attachment=True, download_name='report.pdf', mimetype='application/pdf')

@app.route('/predict', methods=['GET', 'POST'])
def predict():
    if request.method == 'POST':
        try:
            apple_type = request.form['apple_type']
            quantity_kg = float(request.form['quantity_kg'])
            
            encoded_apple_type = label_encoder.transform([apple_type])[0]
            
            input_data = pd.DataFrame([[encoded_apple_type, quantity_kg]], columns=['Apple_Type', 'Quantity_kg'])
            
            # Make prediction
            prediction = model.predict(input_data)
            response = {
                'optimal_temperature': prediction[0][0],
                'optimal_humidity': prediction[0][1],
                'optimal_co2_percent': prediction[0][2],
                'optimal_o2_percent': prediction[0][3]
            }
            
            # Stockage des résultats dans la session
            session['prediction_results'] = response
            
            # Récupération du nom de l'administrateur
            user_id = session.get('user_id')
            if user_id:
                admin_data = supabase.from_('adminrole').select('AdminName').eq('user_id', user_id).execute()
                admin_name = admin_data.data[0]['AdminName'] if admin_data.data else 'Unknown'
                session['admin_name'] = admin_name
            
            return render_template('result.html', response=response)
        except Exception as e:
            return jsonify({'error': str(e)})
    else:
        # Render the prediction form on GET request
        return render_template('index.html')
    
    
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        try:
            response = supabase.auth.sign_in_with_password({"email": email, "password": password})
            user = response.user
            if user:
                user_id = user.id
                admin_check = supabase.from_('adminrole').select('user_id').eq('user_id', user_id).execute()
                
                if admin_check.data:
                    session.pop('user_id', None)
                    session.pop('role', None)
                    session['user_id'] = user_id
                    session['role'] = 'admin'
                    return redirect(url_for('dashboard'))
                else:
                    return render_template('login.html', error='Access denied. You are not an admin.')
            else:
                return render_template('login.html', error='Login failed, please try again.')
        except Exception as e:
            return render_template('login.html', error=f'An unexpected error occurred: {str(e)}')

    return render_template('login.html')

@app.route('/dashboard')
def dashboard():
    if 'user_id' in session and session.get('role') == 'admin':
        try:
            user_id = session.get('user_id')
            # Fetch user data from the adminrole table
            admin_data = supabase.from_('adminrole').select('AdminName').eq('user_id', user_id).execute()
            
            if admin_data.data:
                user_name = admin_data.data[0].get('AdminName', 'Unknown')
            else:
                user_name = 'Unknown'
            
            return render_template('dashboard.html', user_name=user_name)
        except Exception as e:
            return render_template('dashboard.html', user_name="Unknown", error=f"An error occurred while fetching user data: {str(e)}")
    else:
        return render_template('login.html', error="You must be logged in as an admin to access this page.")

@app.route('/logout')
def logout():
    session.clear()  # Ensure the session is fully cleared
    return redirect(url_for('login'))

if __name__ == '__main__':
    app.run(debug=True)
